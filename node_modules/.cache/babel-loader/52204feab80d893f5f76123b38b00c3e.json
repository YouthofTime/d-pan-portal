{"remainingRequest":"E:\\software\\download\\r-pan-scaffolding-master\\r-pan-scaffolding-master\\r-pan-portal\\node_modules\\babel-loader\\lib\\index.js!E:\\software\\download\\r-pan-scaffolding-master\\r-pan-scaffolding-master\\r-pan-portal\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\software\\download\\r-pan-scaffolding-master\\r-pan-scaffolding-master\\r-pan-portal\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\software\\download\\r-pan-scaffolding-master\\r-pan-scaffolding-master\\r-pan-portal\\src\\components\\buttons\\upload-button\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\software\\download\\r-pan-scaffolding-master\\r-pan-scaffolding-master\\r-pan-portal\\src\\components\\buttons\\upload-button\\index.vue","mtime":1710411656464},{"path":"E:\\software\\download\\r-pan-scaffolding-master\\r-pan-scaffolding-master\\r-pan-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\software\\download\\r-pan-scaffolding-master\\r-pan-scaffolding-master\\r-pan-portal\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\software\\download\\r-pan-scaffolding-master\\r-pan-scaffolding-master\\r-pan-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\software\\download\\r-pan-scaffolding-master\\r-pan-scaffolding-master\\r-pan-portal\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"upload-button-content\">\n        <el-button v-if=\"roundFlag\" type=\"primary\" id=\"uploadButton\" :size=\"size\" round @click=\"uploadDialogVisible = true\">\n            上传<i class=\"el-icon-upload el-icon--right\"/>\n        </el-button>\n        <el-button v-if=\"circleFlag\" size=\"size\" id=\"uploadButton\" circle>\n            <i class=\"el-icon-upload\"/>\n        </el-button>\n        <div>\n            <el-dialog\n                    title=\"文件上传\"\n                    :visible.sync=\"uploadDialogVisible\"\n                    width=\"30%\"\n                    :modal=\"false\"\n                    :append-to-body=\"true\"\n                    @opened=\"rebindUploader\"\n                    center>\n                <div class=\"upload-content\" id=\"upload-content\">\n                    <div class=\"drag-content\">\n                        <div class=\"drag-icon-content\">\n                            <i class=\"el-icon-upload drag-icon\"></i>\n                        </div>\n                        <div class=\"drag-text-content\">\n                            <el-link :underline=\"false\" type=\"info\">将文件拖到此处,或</el-link>\n                            <el-link :underline=\"false\" type=\"primary\">点击上传</el-link>\n                        </div>\n                    </div>\n                </div>\n            </el-dialog>\n        </div>\n    </div>\n</template>\n\n<script>\n\n    import Uploader from 'simple-uploader.js'\n    import {getToken} from '../../../utils/cookie'\n    import panUtil from '../../../utils/common'\n    import {MD5} from '../../md5'\n    import fileService from '../../../api/file'\n    import {mapActions, mapGetters, mapMutations} from 'vuex'\n\n    export default {\n        name: 'uploadButton',\n        components: {},\n        props: {\n            roundFlag: Boolean,\n            circleFlag: Boolean,\n            size: String\n        },\n        data() {\n            return {\n                // 详细文档地址：https://github.com/simple-uploader/Uploader/blob/develop/README_zh-CN.md#%E9%85%8D%E7%BD%AE\n                fileOptions: {\n                    target: function (file, chunk) {\n                        if (panUtil.getChunkSize() && panUtil.getChunkSize() > 0) {\n                            return panUtil.getUrlPrefix() + '/file/chunk-upload'\n                        }\n                        return panUtil.getUrlPrefix() + '/file/upload'\n                    },\n                    singleFile: !panUtil.getChunkSize() || panUtil.getChunkSize() <= 0,\n                    chunkSize: panUtil.getChunkSize(),\n                    forceChunkSize: false,\n                    simultaneousUploads: 3,\n                    fileParameterName: 'file',\n                    query: function (file, chunk) {\n                        return {}\n                    },\n                    headers: {\n                        Authorization: getToken()\n                    },\n                    checkChunkUploadedByResponse: function (chunk, message) {\n                        let objMessage = {}\n                        try {\n                            objMessage = JSON.parse(message)\n                        } catch (e) {\n                        }\n                        // fake response\n                        // objMessage.uploaded_chunks = [2, 3, 4, 5, 6, 8, 10, 11, 12, 13, 17, 20, 21]\n                        // check the chunk is uploaded\n                        return (objMessage.data.uploadedChunks || []).indexOf(chunk.offset + 1) >= 0\n                    },\n                    maxChunkRetries: 0,\n                    chunkRetryInterval: null,\n                    progressCallbacksInterval: 500,\n                    successStatuses: [200, 201, 202],\n                    permanentErrors: [404, 415, 500, 501],\n                    initialPaused: false\n                },\n                uploader: undefined,\n                uploadDialogVisible: false,\n                assignFlag: false\n            }\n        },\n        methods: {\n            ...mapMutations({\n                clearTaskList: 'task/clear',\n                addTaskItem: 'task/add',\n                removeTaskItem: 'task/remove',\n                updateTaskStatus: 'task/updateStatus',\n                updateTaskProcess: 'task/updateProcess',\n                getUploadTask: 'task/getTask',\n                updateTaskListViewFlag: 'task/updateViewFlag'\n            }),\n            ...mapActions({\n                reloadFileList: 'file/loadFileList'\n            }),\n            rebindUploader() {\n                if (!this.uploader.support) this.$message.error('本浏览器不支持simple-uploader，请更换浏览器重试')\n                if (!this.assignFlag) {\n                    this.uploader.assignBrowse(document.getElementById('upload-content'))\n                    this.uploader.assignDrop(document.getElementById('upload-content'))\n                    this.assignFlag = true\n                }\n            },\n            initUploader() {\n                this.clearTaskList()\n                // 实例化一个上传对象\n                this.uploader = new Uploader(this.fileOptions)\n                // 如果不支持 需要降级的地方\n                if (!this.uploader.support) this.$message.error('本浏览器不支持simple-uploader，请更换浏览器重试')\n                // this.uploader.assignBrowse(document.getElementById('drag-text'))\n                // this.uploader.assignDrop(document.getElementById('upload-content'))\n                // 绑定进队列\n                this.uploader.on(\"filesAdded\", this.filesAdded)\n                // 绑定进度\n                this.uploader.on(\"fileProgress\", this.uploadProgress)\n                // 上传成功监听\n                this.uploader.on(\"fileSuccess\", this.fileUploaded)\n                // 上传全部完成调用\n                this.uploader.on(\"complete\", this.uploadComplete)\n                // 上传出错调用\n                this.uploader.on(\"fileError\", this.uploadError)\n            },\n            filesAdded(files, fileList, event) {\n                // 插件在调用该方法之前会自动过滤选择的文件 去除正在上传的文件 新添加的文件就是第一个参数files\n                let _this = this\n                _this.uploadDialogVisible = false\n                try {\n                    files.forEach((f) => {\n                        f.pause()\n                        if (f.size > panUtil.getMaxFileSize()) {\n                            throw new Error('文件：' + f.name + '大小超过了最大上传文件的限制（' + panUtil.translateFileSize(panUtil.getMaxFileSize()) + '）')\n                        }\n                        let taskItem = {\n                            target: f,\n                            filename: f.name,\n                            fileSize: panUtil.translateFileSize(f.size),\n                            uploadedSize: panUtil.translateFileSize(0),\n                            status: panUtil.fileStatus.PARSING.code,\n                            statusText: panUtil.fileStatus.PARSING.text,\n                            timeRemaining: panUtil.translateTime(Number.POSITIVE_INFINITY),\n                            speed: panUtil.translateSpeed(f.averageSpeed),\n                            percentage: 0,\n                            parentId: new String(_this.parentId)\n                        }\n                        // 添加\n                        _this.addTaskItem(taskItem)\n                        MD5(f.file, (e, md5) => {\n                            f['uniqueIdentifier'] = md5\n                            fileService.secUpload({\n                                filename: f.name,\n                                identifier: md5,\n                                parentId: _this.parentId\n                            }, res => {\n                                if (res.status === 0) {\n                                    _this.$message.success('文件：' + f.name + ' 上传完成')\n                                    f.cancel()\n                                    _this.removeTaskItem(f.name)\n                                    _this.reloadFileList()\n                                    if (_this.uploader.files.length === 0) {\n                                        this.updateTaskListViewFlag(false)\n                                    }\n                                } else {\n                                    f.resume()\n                                    _this.updateTaskStatus({\n                                        filename: f.name,\n                                        status: panUtil.fileStatus.WAITING.code,\n                                        statusText: panUtil.fileStatus.WAITING.text\n                                    })\n                                }\n                            }, res => {\n                                f.resume()\n                                _this.updateTaskStatus({\n                                    filename: f.name,\n                                    status: panUtil.fileStatus.WAITING.code,\n                                    statusText: panUtil.fileStatus.WAITING.text\n                                })\n                            })\n                        })\n                    })\n                } catch (e) {\n                    _this.$message.error(e.message)\n                    _this.uploader.cancel()\n                    _this.clearTaskList()\n                    return false\n                }\n                _this.updateTaskListViewFlag(true)\n                return true\n            },\n            uploadProgress(rootFile, file, chunk) {\n                let uploadTaskItem = this.$store.getters.getUploadTask(file.name)\n                if (file.isUploading()) {\n                    if (uploadTaskItem.status !== panUtil.fileStatus.UPLOADING.code) {\n                        this.updateTaskStatus({\n                            filename: file.name,\n                            status: panUtil.fileStatus.UPLOADING.code,\n                            statusText: panUtil.fileStatus.UPLOADING.text\n                        })\n                    }\n                    this.updateTaskProcess({\n                        filename: file.name,\n                        speed: panUtil.translateSpeed(file.averageSpeed),\n                        percentage: Math.floor(file.progress() * 100),\n                        uploadedSize: panUtil.translateFileSize(file.sizeUploaded()),\n                        timeRemaining: panUtil.translateTime(file.timeRemaining())\n                    })\n                }\n\n            },\n            fileUploaded(rootFile, file, message, chunk) {\n                let res = {},\n                    _this = this\n                try {\n                    res = JSON.parse(message)\n                } catch (e) {\n                }\n                if (res.status === 0) {\n                    if (res.data.mergeFlag) {\n                        _this.doMerge(file)\n                    } else if (res.data.uploadedChunks && res.data.uploadedChunks.length === file.chunks.length) {\n                        _this.doMerge(file)\n                    }\n                } else {\n                    file.pause()\n                    _this.updateTaskStatus({\n                        filename: file.name,\n                        status: panUtil.fileStatus.FAIL.code,\n                        statusText: panUtil.fileStatus.FAIL.text\n                    })\n                }\n            },\n            uploadComplete() {\n\n            },\n            uploadError(rootFile, file, message, chunk) {\n                this.updateTaskStatus({\n                    filename: file.name,\n                    status: panUtil.fileStatus.FAIL.code,\n                    statusText: panUtil.fileStatus.FAIL.text\n                })\n                this.updateTaskProcess({\n                    filename: file.name,\n                    speed: panUtil.translateSpeed(0),\n                    percentage: 0,\n                    uploadedSize: panUtil.translateFileSize(0),\n                    timeRemaining: panUtil.translateTime(Number.POSITIVE_INFINITY)\n                })\n            },\n            doMerge(file) {\n                let _this = this,\n                    uploadTaskItem = _this.$store.getters.getUploadTask(file.name)\n                _this.updateTaskStatus({\n                    filename: file.name,\n                    status: panUtil.fileStatus.MERGE.code,\n                    statusText: panUtil.fileStatus.MERGE.text\n                })\n                _this.updateTaskProcess({\n                    filename: file.name,\n                    speed: panUtil.translateSpeed(file.averageSpeed),\n                    percentage: 99,\n                    uploadedSize: panUtil.translateFileSize(file.sizeUploaded()),\n                    timeRemaining: panUtil.translateTime(file.timeRemaining())\n                })\n                fileService.merge({\n                    filename: uploadTaskItem.filename,\n                    identifier: uploadTaskItem.target.uniqueIdentifier,\n                    parentId: uploadTaskItem.parentId,\n                    totalSize: uploadTaskItem.target.size\n                }, res => {\n                    _this.$message.success('文件：' + file.name + ' 上传完成')\n                    _this.uploader.removeFile(file)\n                    _this.removeTaskItem(file.name)\n                    _this.reloadFileList()\n                    if (_this.uploader.files.length === 0) {\n                        this.updateTaskListViewFlag(false)\n                    }\n                }, res => {\n                    file.pause()\n                    _this.updateTaskStatus({\n                        filename: file.name,\n                        status: panUtil.fileStatus.FAIL.code,\n                        statusText: panUtil.fileStatus.FAIL.text\n                    })\n                })\n            }\n        },\n        computed: {\n            ...mapGetters(['parentId'])\n        },\n        mounted() {\n            this.initUploader()\n        },\n        watch: {}\n    }\n</script>\n\n<style>\n    .upload-button-content {\n        display: inline-block;\n        margin-right: 10px;\n    }\n    .upload-content {\n        width: 100%;\n        height: 300px;\n        line-height: 300px;\n        display: flex;\n        justify-content: center;\n    }\n    .upload-content .drag-content {\n        border: 0.2em dashed #DCDFE6;\n        border-radius: 1em;\n        width: 80%;\n        height: 250px;\n        line-height: 250px;\n        display: flex;\n        align-items: center;\n        flex-direction: column;\n    }\n\n    .upload-content .drag-content:hover {\n        border: 0.2em dashed #409EFF;\n    }\n\n    .upload-content .drag-content .drag-icon-content {\n        height: 100px;\n        line-height: 100px;\n        width: 100px;\n        margin-top: 25px;\n    }\n\n    .upload-content .drag-content .drag-icon-content .drag-icon {\n        font-size: 7em;\n        color: #DCDFE6;\n    }\n\n    .upload-content .drag-content .drag-text-content {\n        display: block;\n        height: 30px;\n        line-height: 30px;\n    }\n</style>"],"sourceRoot":"src/components/buttons/upload-button"}]}