{"remainingRequest":"E:\\software\\download\\r-pan-scaffolding-master\\r-pan-scaffolding-master\\r-pan-portal\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\software\\download\\r-pan-scaffolding-master\\r-pan-scaffolding-master\\r-pan-portal\\src\\components\\buttons\\transfer-button\\index.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"E:\\software\\download\\r-pan-scaffolding-master\\r-pan-scaffolding-master\\r-pan-portal\\src\\components\\buttons\\transfer-button\\index.vue","mtime":1710063487764},{"path":"E:\\software\\download\\r-pan-scaffolding-master\\r-pan-scaffolding-master\\r-pan-portal\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\software\\download\\r-pan-scaffolding-master\\r-pan-scaffolding-master\\r-pan-portal\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"E:\\software\\download\\r-pan-scaffolding-master\\r-pan-scaffolding-master\\r-pan-portal\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"E:\\software\\download\\r-pan-scaffolding-master\\r-pan-scaffolding-master\\r-pan-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\software\\download\\r-pan-scaffolding-master\\r-pan-scaffolding-master\\r-pan-portal\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnRyYW5zZmVyLWJ1dHRvbi1jb250ZW50IHsKICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgIG1hcmdpbi1yaWdodDogMTBweDsKfQoKLnRyZWUtY29udGVudCB7CiAgICBoZWlnaHQ6IDQwMHB4Owp9CgoudHJlZS1jb250ZW50IC50cmVlIHsKICAgIGhlaWdodDogMTAwJTsKICAgIG92ZXJmbG93OiBhdXRvOwp9Cgo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiIA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/buttons/transfer-button","sourcesContent":["<template>\n    <div class=\"transfer-button-content\">\n        <el-button v-if=\"roundFlag\" :size=\"size\" round @click=\"transferFile\">\n            移动到\n        </el-button>\n        <el-button v-if=\"circleFlag\" icon=\"el-icon-position\" :size=\"size\" circle @click=\"transferFile\">\n        </el-button>\n        <el-dialog\n                title=\"移动文件\"\n                :visible.sync=\"treeDialogVisible\"\n                @open=\"loadTreeData\"\n                @closed=\"resetTreeData\"\n                width=\"30%\"\n                :append-to-body=true\n                :modal-append-to-body=false\n                :center=true>\n            <div class=\"tree-content\">\n                <el-tree\n                        class=\"tree\"\n                        :data=\"treeData\"\n                        empty-text=\"暂无文件夹数据\"\n                        default-expand-all\n                        highlight-current\n                        check-on-click-node\n                        :expand-on-click-node=\"false\"\n                        ref=\"tree\">\n                    <span class=\"custom-tree-node\" slot-scope=\"{ node, data }\">\n                        <i class=\"fa fa-folder-o\" style=\"margin-right: 15px; font-size: 20px; cursor: pointer;\"/>\n                        <span>{{ node.label }}</span>\n                    </span>\n                </el-tree>\n            </div>\n            <span slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click=\"treeDialogVisible = false\">取 消</el-button>\n                <el-button type=\"primary\" @click=\"doChoseTreeNodeCallBack\" :loading=\"loading\">确 定</el-button>\n            </span>\n        </el-dialog>\n    </div>\n</template>\n\n<script>\n\n    import fileService from '../../../api/file'\n    import { mapActions, mapGetters } from 'vuex'\n\n    export default {\n        name: 'TransferButton',\n        components: {},\n        props: {\n            roundFlag: Boolean,\n            circleFlag: Boolean,\n            size: String,\n            item: Object\n        },\n        data() {\n            return {\n                treeDialogVisible: false,\n                treeData: [],\n                loading: false\n            }\n        },\n        methods: {\n            ...mapActions({\n                reloadFileList: 'file/loadFileList'\n            }),\n            transferFile() {\n                let _this = this\n                if (!_this.item && (!_this.multipleSelection || _this.multipleSelection.length == 0)) {\n                    _this.$message.error('请选择要移动的文件')\n                    return\n                }\n                _this.treeDialogVisible = true\n            },\n            doTransferFile(targetParentId) {\n                let _this = this,\n                    fileIds = ''\n                if (_this.item) {\n                    fileIds = _this.item.fileId\n                } else {\n                    let fileIdArr = new Array()\n                    _this.multipleSelection.forEach(item => fileIdArr.push(item.fileId))\n                    fileIds = fileIdArr.join('__,__')\n                }\n                fileService.transfer({\n                    fileIds: fileIds,\n                    targetParentId: targetParentId\n                }, res => {\n                    _this.loading = false\n                    _this.treeDialogVisible = false\n                    _this.$message.success('文件移动成功')\n                    _this.reloadFileList()\n                }, res => {\n                    _this.loading = false\n                    _this.$message.error(res.message)\n                })\n            },\n            doChoseTreeNodeCallBack() {\n                this.loading = true\n                let checkNode = this.$refs.tree.getCurrentNode()\n                if (!checkNode) {\n                    this.$message.error('请选择文件夹')\n                    this.loading = false\n                    return\n                }\n                this.doTransferFile(checkNode.id)\n            },\n            resetTreeData() {\n                this.treeData = new Array()\n            },\n            loadTreeData() {\n                let _this = this\n                fileService.getFolderTree(res => {\n                    _this.treeData = res.data\n                }, res => {\n                    _this.$message.error(res.message)\n                })\n            }\n        },\n        computed: {\n            ...mapGetters(['multipleSelection'])\n        },\n        mounted() {\n        },\n        watch: {}\n    }\n</script>\n\n<style>\n\n    .transfer-button-content {\n        display: inline-block;\n        margin-right: 10px;\n    }\n\n    .tree-content {\n        height: 400px;\n    }\n\n    .tree-content .tree {\n        height: 100%;\n        overflow: auto;\n    }\n\n</style>"]}]}