{"remainingRequest":"E:\\software\\download\\r-pan-scaffolding-master\\r-pan-scaffolding-master\\r-pan-portal\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\software\\download\\r-pan-scaffolding-master\\r-pan-scaffolding-master\\r-pan-portal\\src\\components\\buttons\\upload-button\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\software\\download\\r-pan-scaffolding-master\\r-pan-scaffolding-master\\r-pan-portal\\src\\components\\buttons\\upload-button\\index.vue","mtime":1710411656464},{"path":"E:\\software\\download\\r-pan-scaffolding-master\\r-pan-scaffolding-master\\r-pan-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\software\\download\\r-pan-scaffolding-master\\r-pan-scaffolding-master\\r-pan-portal\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\software\\download\\r-pan-scaffolding-master\\r-pan-scaffolding-master\\r-pan-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\software\\download\\r-pan-scaffolding-master\\r-pan-scaffolding-master\\r-pan-portal\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"index.vue","sourceRoot":"src/components/buttons/upload-button","sourcesContent":["<template>\n    <div class=\"upload-button-content\">\n        <el-button v-if=\"roundFlag\" type=\"primary\" id=\"uploadButton\" :size=\"size\" round @click=\"uploadDialogVisible = true\">\n            上传<i class=\"el-icon-upload el-icon--right\"/>\n        </el-button>\n        <el-button v-if=\"circleFlag\" size=\"size\" id=\"uploadButton\" circle>\n            <i class=\"el-icon-upload\"/>\n        </el-button>\n        <div>\n            <el-dialog\n                    title=\"文件上传\"\n                    :visible.sync=\"uploadDialogVisible\"\n                    width=\"30%\"\n                    :modal=\"false\"\n                    :append-to-body=\"true\"\n                    @opened=\"rebindUploader\"\n                    center>\n                <div class=\"upload-content\" id=\"upload-content\">\n                    <div class=\"drag-content\">\n                        <div class=\"drag-icon-content\">\n                            <i class=\"el-icon-upload drag-icon\"></i>\n                        </div>\n                        <div class=\"drag-text-content\">\n                            <el-link :underline=\"false\" type=\"info\">将文件拖到此处,或</el-link>\n                            <el-link :underline=\"false\" type=\"primary\">点击上传</el-link>\n                        </div>\n                    </div>\n                </div>\n            </el-dialog>\n        </div>\n    </div>\n</template>\n\n<script>\n\n    import Uploader from 'simple-uploader.js'\n    import {getToken} from '../../../utils/cookie'\n    import panUtil from '../../../utils/common'\n    import {MD5} from '../../md5'\n    import fileService from '../../../api/file'\n    import {mapActions, mapGetters, mapMutations} from 'vuex'\n\n    export default {\n        name: 'uploadButton',\n        components: {},\n        props: {\n            roundFlag: Boolean,\n            circleFlag: Boolean,\n            size: String\n        },\n        data() {\n            return {\n                // 详细文档地址：https://github.com/simple-uploader/Uploader/blob/develop/README_zh-CN.md#%E9%85%8D%E7%BD%AE\n                fileOptions: {\n                    target: function (file, chunk) {\n                        if (panUtil.getChunkSize() && panUtil.getChunkSize() > 0) {\n                            return panUtil.getUrlPrefix() + '/file/chunk-upload'\n                        }\n                        return panUtil.getUrlPrefix() + '/file/upload'\n                    },\n                    singleFile: !panUtil.getChunkSize() || panUtil.getChunkSize() <= 0,\n                    chunkSize: panUtil.getChunkSize(),\n                    forceChunkSize: false,\n                    simultaneousUploads: 3,\n                    fileParameterName: 'file',\n                    query: function (file, chunk) {\n                        return {}\n                    },\n                    headers: {\n                        Authorization: getToken()\n                    },\n                    checkChunkUploadedByResponse: function (chunk, message) {\n                        let objMessage = {}\n                        try {\n                            objMessage = JSON.parse(message)\n                        } catch (e) {\n                        }\n                        // fake response\n                        // objMessage.uploaded_chunks = [2, 3, 4, 5, 6, 8, 10, 11, 12, 13, 17, 20, 21]\n                        // check the chunk is uploaded\n                        return (objMessage.data.uploadedChunks || []).indexOf(chunk.offset + 1) >= 0\n                    },\n                    maxChunkRetries: 0,\n                    chunkRetryInterval: null,\n                    progressCallbacksInterval: 500,\n                    successStatuses: [200, 201, 202],\n                    permanentErrors: [404, 415, 500, 501],\n                    initialPaused: false\n                },\n                uploader: undefined,\n                uploadDialogVisible: false,\n                assignFlag: false\n            }\n        },\n        methods: {\n            ...mapMutations({\n                clearTaskList: 'task/clear',\n                addTaskItem: 'task/add',\n                removeTaskItem: 'task/remove',\n                updateTaskStatus: 'task/updateStatus',\n                updateTaskProcess: 'task/updateProcess',\n                getUploadTask: 'task/getTask',\n                updateTaskListViewFlag: 'task/updateViewFlag'\n            }),\n            ...mapActions({\n                reloadFileList: 'file/loadFileList'\n            }),\n            rebindUploader() {\n                if (!this.uploader.support) this.$message.error('本浏览器不支持simple-uploader，请更换浏览器重试')\n                if (!this.assignFlag) {\n                    this.uploader.assignBrowse(document.getElementById('upload-content'))\n                    this.uploader.assignDrop(document.getElementById('upload-content'))\n                    this.assignFlag = true\n                }\n            },\n            initUploader() {\n                this.clearTaskList()\n                // 实例化一个上传对象\n                this.uploader = new Uploader(this.fileOptions)\n                // 如果不支持 需要降级的地方\n                if (!this.uploader.support) this.$message.error('本浏览器不支持simple-uploader，请更换浏览器重试')\n                // this.uploader.assignBrowse(document.getElementById('drag-text'))\n                // this.uploader.assignDrop(document.getElementById('upload-content'))\n                // 绑定进队列\n                this.uploader.on(\"filesAdded\", this.filesAdded)\n                // 绑定进度\n                this.uploader.on(\"fileProgress\", this.uploadProgress)\n                // 上传成功监听\n                this.uploader.on(\"fileSuccess\", this.fileUploaded)\n                // 上传全部完成调用\n                this.uploader.on(\"complete\", this.uploadComplete)\n                // 上传出错调用\n                this.uploader.on(\"fileError\", this.uploadError)\n            },\n            filesAdded(files, fileList, event) {\n                // 插件在调用该方法之前会自动过滤选择的文件 去除正在上传的文件 新添加的文件就是第一个参数files\n                let _this = this\n                _this.uploadDialogVisible = false\n                try {\n                    files.forEach((f) => {\n                        f.pause()\n                        if (f.size > panUtil.getMaxFileSize()) {\n                            throw new Error('文件：' + f.name + '大小超过了最大上传文件的限制（' + panUtil.translateFileSize(panUtil.getMaxFileSize()) + '）')\n                        }\n                        let taskItem = {\n                            target: f,\n                            filename: f.name,\n                            fileSize: panUtil.translateFileSize(f.size),\n                            uploadedSize: panUtil.translateFileSize(0),\n                            status: panUtil.fileStatus.PARSING.code,\n                            statusText: panUtil.fileStatus.PARSING.text,\n                            timeRemaining: panUtil.translateTime(Number.POSITIVE_INFINITY),\n                            speed: panUtil.translateSpeed(f.averageSpeed),\n                            percentage: 0,\n                            parentId: new String(_this.parentId)\n                        }\n                        // 添加\n                        _this.addTaskItem(taskItem)\n                        MD5(f.file, (e, md5) => {\n                            f['uniqueIdentifier'] = md5\n                            fileService.secUpload({\n                                filename: f.name,\n                                identifier: md5,\n                                parentId: _this.parentId\n                            }, res => {\n                                if (res.status === 0) {\n                                    _this.$message.success('文件：' + f.name + ' 上传完成')\n                                    f.cancel()\n                                    _this.removeTaskItem(f.name)\n                                    _this.reloadFileList()\n                                    if (_this.uploader.files.length === 0) {\n                                        this.updateTaskListViewFlag(false)\n                                    }\n                                } else {\n                                    f.resume()\n                                    _this.updateTaskStatus({\n                                        filename: f.name,\n                                        status: panUtil.fileStatus.WAITING.code,\n                                        statusText: panUtil.fileStatus.WAITING.text\n                                    })\n                                }\n                            }, res => {\n                                f.resume()\n                                _this.updateTaskStatus({\n                                    filename: f.name,\n                                    status: panUtil.fileStatus.WAITING.code,\n                                    statusText: panUtil.fileStatus.WAITING.text\n                                })\n                            })\n                        })\n                    })\n                } catch (e) {\n                    _this.$message.error(e.message)\n                    _this.uploader.cancel()\n                    _this.clearTaskList()\n                    return false\n                }\n                _this.updateTaskListViewFlag(true)\n                return true\n            },\n            uploadProgress(rootFile, file, chunk) {\n                let uploadTaskItem = this.$store.getters.getUploadTask(file.name)\n                if (file.isUploading()) {\n                    if (uploadTaskItem.status !== panUtil.fileStatus.UPLOADING.code) {\n                        this.updateTaskStatus({\n                            filename: file.name,\n                            status: panUtil.fileStatus.UPLOADING.code,\n                            statusText: panUtil.fileStatus.UPLOADING.text\n                        })\n                    }\n                    this.updateTaskProcess({\n                        filename: file.name,\n                        speed: panUtil.translateSpeed(file.averageSpeed),\n                        percentage: Math.floor(file.progress() * 100),\n                        uploadedSize: panUtil.translateFileSize(file.sizeUploaded()),\n                        timeRemaining: panUtil.translateTime(file.timeRemaining())\n                    })\n                }\n\n            },\n            fileUploaded(rootFile, file, message, chunk) {\n                let res = {},\n                    _this = this\n                try {\n                    res = JSON.parse(message)\n                } catch (e) {\n                }\n                if (res.status === 0) {\n                    if (res.data.mergeFlag) {\n                        _this.doMerge(file)\n                    } else if (res.data.uploadedChunks && res.data.uploadedChunks.length === file.chunks.length) {\n                        _this.doMerge(file)\n                    }\n                } else {\n                    file.pause()\n                    _this.updateTaskStatus({\n                        filename: file.name,\n                        status: panUtil.fileStatus.FAIL.code,\n                        statusText: panUtil.fileStatus.FAIL.text\n                    })\n                }\n            },\n            uploadComplete() {\n\n            },\n            uploadError(rootFile, file, message, chunk) {\n                this.updateTaskStatus({\n                    filename: file.name,\n                    status: panUtil.fileStatus.FAIL.code,\n                    statusText: panUtil.fileStatus.FAIL.text\n                })\n                this.updateTaskProcess({\n                    filename: file.name,\n                    speed: panUtil.translateSpeed(0),\n                    percentage: 0,\n                    uploadedSize: panUtil.translateFileSize(0),\n                    timeRemaining: panUtil.translateTime(Number.POSITIVE_INFINITY)\n                })\n            },\n            doMerge(file) {\n                let _this = this,\n                    uploadTaskItem = _this.$store.getters.getUploadTask(file.name)\n                _this.updateTaskStatus({\n                    filename: file.name,\n                    status: panUtil.fileStatus.MERGE.code,\n                    statusText: panUtil.fileStatus.MERGE.text\n                })\n                _this.updateTaskProcess({\n                    filename: file.name,\n                    speed: panUtil.translateSpeed(file.averageSpeed),\n                    percentage: 99,\n                    uploadedSize: panUtil.translateFileSize(file.sizeUploaded()),\n                    timeRemaining: panUtil.translateTime(file.timeRemaining())\n                })\n                fileService.merge({\n                    filename: uploadTaskItem.filename,\n                    identifier: uploadTaskItem.target.uniqueIdentifier,\n                    parentId: uploadTaskItem.parentId,\n                    totalSize: uploadTaskItem.target.size\n                }, res => {\n                    _this.$message.success('文件：' + file.name + ' 上传完成')\n                    _this.uploader.removeFile(file)\n                    _this.removeTaskItem(file.name)\n                    _this.reloadFileList()\n                    if (_this.uploader.files.length === 0) {\n                        this.updateTaskListViewFlag(false)\n                    }\n                }, res => {\n                    file.pause()\n                    _this.updateTaskStatus({\n                        filename: file.name,\n                        status: panUtil.fileStatus.FAIL.code,\n                        statusText: panUtil.fileStatus.FAIL.text\n                    })\n                })\n            }\n        },\n        computed: {\n            ...mapGetters(['parentId'])\n        },\n        mounted() {\n            this.initUploader()\n        },\n        watch: {}\n    }\n</script>\n\n<style>\n    .upload-button-content {\n        display: inline-block;\n        margin-right: 10px;\n    }\n    .upload-content {\n        width: 100%;\n        height: 300px;\n        line-height: 300px;\n        display: flex;\n        justify-content: center;\n    }\n    .upload-content .drag-content {\n        border: 0.2em dashed #DCDFE6;\n        border-radius: 1em;\n        width: 80%;\n        height: 250px;\n        line-height: 250px;\n        display: flex;\n        align-items: center;\n        flex-direction: column;\n    }\n\n    .upload-content .drag-content:hover {\n        border: 0.2em dashed #409EFF;\n    }\n\n    .upload-content .drag-content .drag-icon-content {\n        height: 100px;\n        line-height: 100px;\n        width: 100px;\n        margin-top: 25px;\n    }\n\n    .upload-content .drag-content .drag-icon-content .drag-icon {\n        font-size: 7em;\n        color: #DCDFE6;\n    }\n\n    .upload-content .drag-content .drag-text-content {\n        display: block;\n        height: 30px;\n        line-height: 30px;\n    }\n</style>"]}]}